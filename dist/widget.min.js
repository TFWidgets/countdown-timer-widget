(function(window, document){
  var defaultConfig = {target:null, autoStart:false, doneText:'Completed', labels:{days:'Days', hours:'Hours', minutes:'Minutes', seconds:'Seconds'}};

  function CountdownWidget(el, options){
    this.el = el;
    this.config = Object.assign({}, defaultConfig, options||{});
    this.timer = null;
    this.init();
  }

  CountdownWidget.prototype.init = function(){
    this.el.innerHTML = '<div class="countdown-widget"><div class="countdown-digit"><div class="countdown-number" data-unit="days">00</div><div class="countdown-label">'+this.config.labels.days+'</div></div><div class="countdown-digit"><div class="countdown-number" data-unit="hours">00</div><div class="countdown-label">'+this.config.labels.hours+'</div></div><div class="countdown-digit"><div class="countdown-number" data-unit="minutes">00</div><div class="countdown-label">'+this.config.labels.minutes+'</div></div><div class="countdown-digit"><div class="countdown-number" data-unit="seconds">00</div><div class="countdown-label">'+this.config.labels.seconds+'</div></div></div>';
    if(this.config.autoStart && this.config.target) this.start();
  };

  CountdownWidget.prototype.start = function(){
    var self=this;
    if(this.timer) clearInterval(this.timer);
    var targetTime = new Date(this.config.target).getTime();
    this.timer = setInterval(function(){
      var distance = targetTime - Date.now();
      if(distance<0){clearInterval(self.timer); return;}
      var days=Math.floor(distance/86400000),
          hours=Math.floor((distance%86400000)/3600000),
          minutes=Math.floor((distance%3600000)/60000),
          seconds=Math.floor((distance%60000)/1000);
      self.el.querySelector('[data-unit="days"]').textContent = String(days).padStart(2,'0');
      self.el.querySelector('[data-unit="hours"]').textContent = String(hours).padStart(2,'0');
      self.el.querySelector('[data-unit="minutes"]').textContent = String(minutes).padStart(2,'0');
      self.el.querySelector('[data-unit="seconds"]').textContent = String(seconds).padStart(2,'0');
    },1000);
  };

  function init(selector, options){
    var els = typeof selector==='string'? document.querySelectorAll(selector):[selector];
    return Array.from(els).map(el=>new CountdownWidget(el, options));
  }

  // Автоинициализация через data-widget
  document.addEventListener('DOMContentLoaded', function(){
    document.querySelectorAll('[data-widget="countdown"]').forEach(function(el){
      var options = el.dataset.options?JSON.parse(el.dataset.options):{};
      new CountdownWidget(el, options);
    });
  });

  // Глобальный объект
  window.CountdownWidget = {CountdownWidget: CountdownWidget, init:init};
})(window, document);
